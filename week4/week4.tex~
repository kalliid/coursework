\documentclass[a4paper, 11pt, titlepage, english]{article}

\usepackage{babel, textcomp}
\usepackage[latin1]{inputenc}
\usepackage[T1]{fontenc, url}
\usepackage{amsmath, amssymb}
\usepackage{amsbsy, amsfonts}
\usepackage{graphicx, color, xcolor}
\usepackage{framed, parskip}
\usepackage{flafter, caption, multicol}
\usepackage{verbatim, listings, fancyvrb}

%\DeclareCaptionLabelSeparator{colon}{. }
\renewcommand{\captionfont}{\small\sffamily}
\renewcommand{\captionlabelfont}{\bf\sffamily}
\setlength{\captionmargin}{20pt}

\setcounter{tocdepth}{2}

\DeclareMathAlphabet{\mathbfit}{OML}{cmm}{b}{it}

\definecolor{javared}{rgb}{0.6,0,0} % for strings
\definecolor{javagreen}{rgb}{0.25,0.5,0.35} % comments
\definecolor{javapurple}{rgb}{0.5,0,0.35} % keywords
\definecolor{javadocblue}{rgb}{0.25,0.35,0.75} % javadoc

\lstset{language=python,
basicstyle=\ttfamily\footnotesize,
keywordstyle=\color{javapurple}\bfseries,
stringstyle=\color{javared},
commentstyle=\color{javagreen},
morecomment=[s][\color{javadocblue}]{/**}{*/},
% numbers=left,
% numberstyle=\tiny\color{black},
stepnumber=2,
numbersep=10pt,
tabsize=2,
showspaces=false,
showstringspaces=false,
frame= single,
breaklines=true}



\usepackage{geometry}
\geometry{headheight=0.01mm}
\geometry{top=20mm, bottom=20mm, left=34mm, right=34mm}

\renewcommand{\arraystretch}{2}
\setlength{\tabcolsep}{10pt}
\makeatletter
\renewcommand*\env@matrix[1][*\c@MaxMatrixCols c]{%
  \hskip -\arraycolsep
  \let\@ifnextchar\new@ifnextchar
  \array{#1}}
\makeatother

\newcommand{\bt}[1]{\mathbfit{#1}}
\newcommand{\p}{\partial}
\renewcommand{\d}{\text{d}}
\newcommand{\D}{\text{D}}
\newcommand{\N}{\text{N}}
\newcommand{\R}{\text{R}}
\renewcommand{\c}{\cdot}

\usepackage{calc}

\title{INF3331 - Week 4}
\author{Jonas van den Brink \\ \texttt{j.v.d.brink@fys.uio.no}}

\begin{document}
\pagestyle{empty}
\subsection*{Jonas van den Brink, jvbrink}
\texttt{j.v.d.brink@fys.uio.no}
\subsection*{4.1}
\lstinputlisting{count_words.py}

\clearpage
\subsection*{4.2}

The regex pattern used is as follows
\begin{lstlisting}
([+\-]?\d+\.?\d*|[+\-]?\.\d+|[+\-]?\d\.\d+[Ee][+\-]\d\d?)
\end{lstlisting}
This expressions matches to three different structures of numbers. First there is
\begin{lstlisting}
[+\-]?\d+\.?\d*
\end{lstlisting}
Here, \verb![+\-]?! matches either a '+' or a '-', or nothing, \verb!\d+! matches any decimal digit one or more times, \verb+\.?+ is an optional match to '.' and \verb+\d*+ matches any decimal digit zero or more times. This expression is fine. Next we have:
\begin{lstlisting}
[+\-]?\.\d+
\end{lstlisting}
Again \verb![+\-]?! matches either a '+' or a '-', or nothing, while \verb+\.+ matches to a '.' and \verb!\d+! matches any decimal digit one or more times. This part is also fine. Finally we have
\begin{lstlisting}
[+\-]?\d\.\d+[Ee][+\-]\d\d?
\end{lstlisting}
This structure is supposed to match any number on scientific form. Again we start of with the optional sign: \verb![+/-]?!, followed by a single decimal digit and a '.': \verb!\d\.!, note that in scientific form all numbers are written on this form, so everything is fine so far. Next we match one or more decimal digits and either an 'E' or 'e': \verb!\d+[Ee]'!, we then include the sign of the expoential\verb![+\-]! followed by exactly two decimal digits: \verb+\d\d+. There are three problems with this expression, first of, there is no requirement of having any digits between the '.' and the exponential in a scientific form, so we replace \verb!\d+! with \verb+\d*+. Second, it is perfectly okey to write a scientific form without the positive sign in the expoential, so we put in an optional character: \verb+?+. Lastely, there is no need to have exactly two decimal digits in the exponential, so we change to match one or more digits: \verb!\d+!.

The final regex expression we use is then
\begin{lstlisting}
([+\-]?\d+\.?\d*|[+\-]?\.\d+|[+\-]?\d\.\d*[Ee][+\-]?\d+)
\end{lstlisting}

And the full program is as follows
\lstinputlisting{regexerror.py}

\clearpage
\subsection*{4.3}
There are several reasons why these expressions fail. First of, they match to any character in the groups by using \verb!(.+)!, but we would like to only get the numbers, so we should instead match only decimal digits inside the groups, so we instead match our group as \verb!(\d+)! and put an optional number of whitespace characters on each side of the groups. The first expression also has an optional extra character where it makes no sense to use one, so we remove this.

The final regex expression we use is then
\begin{lstlisting}
\[\s*(\d+)\s*:\s*(\d+)\s*,?\s*(\d*)\s*\]
\end{lstlisting}

And the full program is as follows
\lstinputlisting{loop_regex.py}

\subsection*{4.4}
The regex expression used here does what is wanted, it is more the use of the \verb+re.findall+-function that is a bit strange. We can easily extract the lower and upper bounds from the string by using the \verb+re.finditer+-function, which then returns an iterator of \verb+MatchObject+-instances. We can then loop over the iterator and extract the \verb+number+-group for each match.
\lstinputlisting{findallerror.py}

\end{document}