In this workshop we will look at projectile motion. Broadly speaking, we can say the main goal of mechanics is to find the motion of objects as functions of time. We are usually looking for the velocity and displacement, denoted $v(t)$ and $x(t)$ respectively. These are found from the equations of motions, which are examples of ordinary differential equations (ODEs). The equations of motions are:  $$v(t) = \frac{dx}{dt},$$ $$a(t) = \frac{dv}{dt}.$$ Where $a(t)$ is the acceleration of the object in question, which can be found from Newton's 2. law of motion $$F(x,v,t) = ma(t).$$ So if we can analyze the forces acting on an object, we find the acceleration and can solve the equations of motion to find the velocity and displacement of the object.  We will now look at how we can solve these ODEs using numerical methods in Python. 

Let us start by looking at the velocity-equation, and assume that we know the acceleration of the object. Writing out the definition of the derivative yields $$a(t) = \frac{dv}{dt} = \lim_{\Delta t \to 0} \frac{v(t+\Delta t) - v(t)}{\Delta t}.$$ If we don't take the real limit of $\Delta t$, but instead let $\Delta t$ be small, yet finite, we have the approximation  $$a(t) \approx \frac{v(t+\Delta t) - v(t)}{\Delta t}.$$ This approvimation is better the smaller $\Delta t$ is. We now solve this equation for $v(t+\Delta t)$ to find $$v(t+\Delta t) \approx v(t) + a(t)\Delta t.$$ 

Now this equation holds for any value of $t$. As $\Delta t$ has been chosen to be a finite time-constant, we can define $t_i = i\Delta t$ and evaluate our equation at the time $t_i$, so that we have $$v(t_i+\Delta t) \approx v(t_i) + a(t_i)\Delta t.$$ Of course, $t_i +\Delta_t = t_{i+1}$, so we can simplify
$$v(t_{i+1}) \approx v(t_i) + a(t_i)\Delta t.$$
So if we know the velocity and acceleration of an object at the time $t_i$, we can use this equation to calculate the velocity a small step forward in time. Any ODE must have some initial condition $v(t_0)$, and so that will be our starting point. From $v(t_0)$ we can calculate $v(t_1)$ and then $v(t_2)$ and so on
$$v(t_1) = v(t_0) + a(t_0)\Delta t,$$ $$v(t_2) = v(t_1) + a(t_1)\Delta t,$$ $$v(t_3) = v(t_2) + a(t_2)\Delta t,$$ $$\qquad \vdots \qquad \qquad \qquad$$
We can do the exact same thing for the position $$x(t) = frac{dv}{dt} \approx frac{v(t+\Delta t) - v(t)}{\Delta t},$$ which yields $$x(t_{i+1}) \approx x(t_i) + v(t_i)\Delta t.$$ So we can use the same step-wise approach we found for velocity. This means we have an iterative approach to find solve the ODEs. To write these equations more elegantly, we denote $x(t_i)$ as just $x_i$ and $v(t_i)$ as just $v_i$.

Now, we have assumed the acceleration to be known, this is often not the case. However, Newtons 2. allows us to find it from the forces acting on the object. In most physical systems, the Force is only a function of the velocity and position of the object and perhaps the time. So we have $$a(t_i) = F(x_i, v_i, t_i)/m.$$ And as we already know $x_i$ and $v_i$ when we compute $v_{i+1}$, so this works perfectly. 

We have now found our algorithm. For each time step, we do the following in order

Use the previous results $x_i$ and $v_i$ to compute the acceleration: $a_i = a(x_i, v_i, t_i)$.
Compute the new velocity: $v_{i+1} = v_i + a_i\Delta t$.
Compute the new position: $x_{i+1} = x_i + v_i\Delta t$.

This is quite easy to program, as we are solving iteratively, we will use a for-loop to make our job easier. If we want to perform $N$ steps we write

# Solving equations of motion iteratively
for i in range(N):
	a[i] = F(x[i], v[i], t[i])/m
	v[i+1] = v[i] + a[i]*dt
	x[i+1] = x[i] + v[i]*dt

Now, before this can run however, we have to define some things. First we must create our time-array, and also empty arrays for the acceleration, position and velocity. We must also define our constants, such as the mass, the number of steps and the time-step. Lastly we must define the Force function.

Let us look at an example, throwing a tennis ball straight into the air. While the ball is in the air, there are two forces acting on the ball, gravity and air resistance. These are given by
$$F_g = -mg,$$
$$F_d = Dv^2,$$
Where $D$ is the drag coefficient, for a tennis ball, this is roughly 0.001.

A two-dimensional example

The examples we have looked at so far has states $v$ and $x$ as scalars, but often we want to look at two and three dimensional systems. In this case we simply replace $v(t)$ and $x(t)$ with the vectors $\vec{v}(t)$ and $\vec{r}(t)$. All equations are the same as before and the code is quite similar too.





Examples

A baseball is hit so that it has a speed of $v_0 = 60$ m/s at a height of 1 m above the ground. The baseball is travelling at a 30 % incline relative to the ground.

